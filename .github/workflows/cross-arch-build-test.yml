name: Cross-Architecture Build Test

on:
  push:
    branches: [ main, krew-init, install-test-workflow ]
  pull_request:
    branches: [ main, krew-init ]
  workflow_dispatch:

jobs:
  # Build all architectures in one place
  build-all:
    name: Build All Architectures
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Build all architectures using make
      run: |
        echo "Building all architectures..."
        make release-build
        echo "‚úÖ All builds completed"

    - name: List generated binaries
      run: |
        echo "Generated binaries:"
        ls -la kubectl-oadp-*
        echo ""
        echo "File details:"
        file kubectl-oadp-* || true

    - name: Upload Linux binaries
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: |
          kubectl-oadp-linux-amd64
          kubectl-oadp-linux-arm64

    - name: Upload macOS binaries  
      uses: actions/upload-artifact@v4
      with:
        name: macos-binaries
        path: |
          kubectl-oadp-darwin-amd64
          kubectl-oadp-darwin-arm64

    - name: Upload Windows binaries
      uses: actions/upload-artifact@v4
      with:
        name: windows-binaries
        path: |
          kubectl-oadp-windows-amd64.exe
          kubectl-oadp-windows-arm64.exe

    - name: Run host tests
      run: |
        echo "Running tests on build host..."
        make test
        echo "‚úÖ Host tests passed"

  # Test Linux binaries on native Linux runners
  test-linux:
    name: Test Linux
    needs: build-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            binary: kubectl-oadp-linux-amd64
          - os: ubuntu-latest-arm64
            arch: arm64  
            binary: kubectl-oadp-linux-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code (for tests)
      uses: actions/checkout@v4

    - name: Set up Go (for running tests)
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Download Linux binaries
      uses: actions/download-artifact@v4
      with:
        name: linux-binaries

    - name: Verify architecture match
      run: |
        echo "Expected architecture: ${{ matrix.arch }}"
        echo "Runner architecture: $(uname -m)"
        echo "Go architecture: $(go env GOARCH)"

    - name: Test binary execution
      run: |
        chmod +x ${{ matrix.binary }}
        echo "Testing ${{ matrix.binary }} on $(uname -m)..."
        ./${{ matrix.binary }} --help
        echo "‚úÖ Binary execution successful"

    - name: Install and test as kubectl plugin
      run: |
        mkdir -p /tmp/bin
        cp ${{ matrix.binary }} /tmp/bin/kubectl-oadp
        chmod +x /tmp/bin/kubectl-oadp
        export PATH="/tmp/bin:$PATH"
        
        echo "Testing kubectl plugin functionality..."
        kubectl-oadp --help
        kubectl-oadp version --help
        kubectl-oadp nonadmin --help
        echo "‚úÖ kubectl plugin tests passed"

    - name: Run test suite
      run: |
        echo "Running full test suite..."
        make test
        echo "‚úÖ Test suite passed"

  # Test macOS binaries on native macOS runners
  test-macos:
    name: Test macOS
    needs: build-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13  # Intel
            arch: amd64
            binary: kubectl-oadp-darwin-amd64
          - os: macos-latest  # Apple Silicon
            arch: arm64
            binary: kubectl-oadp-darwin-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code (for tests)
      uses: actions/checkout@v4

    - name: Set up Go (for running tests)
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Download macOS binaries
      uses: actions/download-artifact@v4
      with:
        name: macos-binaries

    - name: Verify architecture match
      run: |
        echo "Expected architecture: ${{ matrix.arch }}"
        echo "Runner architecture: $(uname -m)"
        echo "Go architecture: $(go env GOARCH)"

    - name: Test binary execution
      run: |
        chmod +x ${{ matrix.binary }}
        echo "Testing ${{ matrix.binary }} on $(uname -m)..."
        ./${{ matrix.binary }} --help
        echo "‚úÖ Binary execution successful"

    - name: Install and test as kubectl plugin
      run: |
        mkdir -p /tmp/bin
        cp ${{ matrix.binary }} /tmp/bin/kubectl-oadp
        chmod +x /tmp/bin/kubectl-oadp
        export PATH="/tmp/bin:$PATH"
        
        echo "Testing kubectl plugin functionality..."
        kubectl-oadp --help
        kubectl-oadp version --help
        kubectl-oadp nonadmin --help
        echo "‚úÖ kubectl plugin tests passed"

    - name: Run test suite
      run: |
        echo "Running full test suite..."
        make test
        echo "‚úÖ Test suite passed"

  # Test Windows binaries on Windows runner
  test-windows:
    name: Test Windows
    needs: build-all
    runs-on: windows-latest
    
    steps:
    - name: Checkout code (for tests)
      uses: actions/checkout@v4

    - name: Set up Go (for running tests)
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Download Windows binaries
      uses: actions/download-artifact@v4
      with:
        name: windows-binaries

    - name: Verify both Windows binaries exist
      run: |
        echo "Verifying Windows binaries..."
        ls kubectl-oadp-windows-amd64.exe
        ls kubectl-oadp-windows-arm64.exe
        echo "‚úÖ Both Windows binaries found"

    - name: Test amd64 binary execution (native)
      run: |
        echo "Testing Windows amd64 binary (native execution)..."
        .\kubectl-oadp-windows-amd64.exe --help
        echo "‚úÖ Windows amd64 binary execution successful"

    - name: Install and test amd64 binary as kubectl plugin
      run: |
        mkdir -p C:\tmp\bin
        copy kubectl-oadp-windows-amd64.exe C:\tmp\bin\kubectl-oadp.exe
        $env:PATH = "C:\tmp\bin;" + $env:PATH
        
        echo "Testing kubectl plugin functionality..."
        kubectl-oadp --help
        kubectl-oadp version --help  
        kubectl-oadp nonadmin --help
        echo "‚úÖ kubectl plugin tests passed"

    - name: Verify arm64 binary (build verification only)
      run: |
        echo "Verifying Windows arm64 binary was built successfully..."
        echo "Note: Cannot execute arm64 binary on amd64 runner, but verifying file exists and has reasonable size"
        $size = (Get-Item kubectl-oadp-windows-arm64.exe).Length
        echo "Windows arm64 binary size: $size bytes"
        if ($size -lt 1MB) {
          echo "‚ùå Binary size seems too small"
          exit 1
        }
        echo "‚úÖ Windows arm64 binary verification complete"

    - name: Run test suite
      run: |
        echo "Running full test suite..."
        make test
        echo "‚úÖ Test suite passed"

  # Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [build-all, test-linux, test-macos, test-windows]
    if: always()
    
    steps:
    - name: Check all results
      run: |
        echo "=== Cross-Architecture Build & Test Summary ==="
        echo ""
        
        if [ "${{ needs.build-all.result }}" = "success" ]; then
          echo "‚úÖ Multi-arch build: PASSED"
        else
          echo "‚ùå Multi-arch build: FAILED"
        fi
        
        if [ "${{ needs.test-linux.result }}" = "success" ]; then
          echo "‚úÖ Linux tests (amd64 + arm64): PASSED"
        else
          echo "‚ùå Linux tests: FAILED"
        fi
        
        if [ "${{ needs.test-macos.result }}" = "success" ]; then
          echo "‚úÖ macOS tests (Intel + Apple Silicon): PASSED"
        else
          echo "‚ùå macOS tests: FAILED"
        fi
        
        if [ "${{ needs.test-windows.result }}" = "success" ]; then
          echo "‚úÖ Windows tests (amd64 native + arm64 build verification): PASSED"
        else
          echo "‚ùå Windows tests: FAILED"
        fi
        
        echo ""
        if [ "${{ needs.build-all.result }}" = "success" ] && \
           [ "${{ needs.test-linux.result }}" = "success" ] && \
           [ "${{ needs.test-macos.result }}" = "success" ] && \
           [ "${{ needs.test-windows.result }}" = "success" ]; then
          echo "üéâ All cross-architecture builds and tests successful!"
          echo "   Validated: Linux (amd64/arm64 native), macOS (Intel/Apple Silicon native), Windows (amd64 native + arm64 build)"
          exit 0
        else
          echo "üí• Some builds or tests failed - check the logs above"
          exit 1
        fi 